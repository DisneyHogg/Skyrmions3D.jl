        - 
        - using Skyrmions3D
        - 
        - a_skyrmion = Skyrmion(5,0.2)
        - b_skyrmion = Skyrmion(6,0.2)
        - 
        - @test_throws Exception product_approx(a_skyrmion, b_skyrmion)
        - 
        - b_skyrmion = Skyrmion(5,0.2)
        - 
        - @test product_approx(a_skyrmion, b_skyrmion).pion_field == a_skyrmion.pion_field
        - 
        - product_approx!(a_skyrmion, b_skyrmion)
        - @test b_skyrmion.pion_field == a_skyrmion.pion_field
        - 
        - translate_sk!(a_skyrmion, [0.0,0.0,-4.0])
        - @test a_skyrmion.pion_field == b_skyrmion.pion_field
        - 
        - rotate_sk!(a_skyrmion, 0.5, [0.0,0.0,1.0])
        - @test a_skyrmion.pion_field == b_skyrmion.pion_field
        - 
        - isorotate_sk!(a_skyrmion, 0.5, [0.0,1.0,0.0])
        - @test a_skyrmion.pion_field == b_skyrmion.pion_field
        - 
        - 
        - # Check if transformations work in the same way for rational maps and post-RM transforms.
        - # Need to actually make a B=1
        - 
        - a_skyrmion = Skyrmion(5,0.2)
        - b_skyrmion = Skyrmion(5,0.2)
        - set_neumann!(a_skyrmion)
        - set_neumann!(b_skyrmion)
        - 
     2036 p(z) = z;
     1943 q(z) = 1;
     3529 f(r) = pi*exp( -(r.^3)./12.0 )
        - make_rational_map!(a_skyrmion, p, q, f)
        - 
        1 for X0 in [ [0.2,0,0,0,0], [-0.2,0.0,0.0], [0.0,0.2,0.0], [0.0,-0.2,0.0], [0.0,0.0,0.2], [0.0,0.0,-0.2] ]
        - 
        6     make_rational_map!(a_skyrmion, p, q, f)
        6     make_rational_map!(b_skyrmion, p, q, f, X=X0)
        6     @test translate_sk(a_skyrmion, X0).pion_field[3,3,3,:] ≈ b_skyrmion.pion_field[3,3,3,:]
        - 
        6 end
        - 
        - theta = 2.0*pi*rand()
        - n = [rand(), rand(), rand()]
        - 
        - make_rational_map!(a_skyrmion, p, q, f)
        - make_rational_map!(b_skyrmion, p, q, f, iTH = theta, i_n = n)
        - @test isorotate_sk(a_skyrmion, theta, n).pion_field[3,3,3,:] ≈ b_skyrmion.pion_field[3,3,3,:]
        - 
        - make_rational_map!(a_skyrmion, p, q, f)
        - make_rational_map!(b_skyrmion, p, q, f, jTH = theta, j_n = n)
        - @test rotate_sk(a_skyrmion, theta, n).pion_field[3,3,3,:] ≈ b_skyrmion.pion_field[3,3,3,:]
        - 
        - 
        - b_skyrmion = Skyrmion(6,0.2)
        - set_neumann!(b_skyrmion)
        - make_rational_map!(b_skyrmion, p, q, f, X=[0.2,0.0,0.0])
        - center_skyrmion!(a_skyrmion)
        - @test center_of_mass(a_skyrmion) ≈ [0.0,0.0,0.0]
        - 
        - 
        - Skyrmions3D.set_dirichlet_boudary!(b_skyrmion, vac=[2.0,0.2,-0.3,0.5])
        - @test b_skyrmion.pion_field[1,1,1,:] == [2.0,0.2,-0.3,0.5]
