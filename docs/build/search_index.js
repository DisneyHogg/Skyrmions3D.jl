var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Here are all the exported functions of Skyrmions3D.","category":"page"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Skyrmion","category":"page"},{"location":"api/#Skyrmions3D.Skyrmion","page":"API","title":"Skyrmions3D.Skyrmion","text":"Skyrmion(lp::Int64, ls::Float64)\nSkyrmion([lpx,lpy,lpx], [lsx,lsy,lsz])\n\nCreate a skyrme field with lp lattice points and ls lattice spacing. \n\nOptional arguments\n\nmpi = 0.0: sets the pion mass for this Skyrme field\n\n\n\n\n\n","category":"type"},{"location":"api/#Set-up-the-system","page":"API","title":"Set up the system","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"set_lattice!\nset_dirichlet!\nset_neumann!\nset_periodic!\nset_mpi!\nset_physical!\nset_Fpi!\nset_ee!","category":"page"},{"location":"api/#Skyrmions3D.set_lattice!","page":"API","title":"Skyrmions3D.set_lattice!","text":"set_lattice!(skyrmion, lp = [lpx, lpy, lpz], ls = [lsx, lsy, lsz])\n\nSets the underlying lattice to one with lpxxlpyxlpz points and lsxxlsyxlsz spacings, and reinterpolates skyrmion on the new grid.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_dirichlet!","page":"API","title":"Skyrmions3D.set_dirichlet!","text":"set_dirichlet!(skyrmion::Skyrmion)\n\nSets the skyrmion to have periodic boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_neumann!","page":"API","title":"Skyrmions3D.set_neumann!","text":"set_dirichlet!(skyrmion::Skyrmion)\n\nSets the skyrmion to have Dirichlet boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_periodic!","page":"API","title":"Skyrmions3D.set_periodic!","text":"set_periodic!(skyrmion::Skyrmion)\n\nSets the skyrmion to have periodic boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_mpi!","page":"API","title":"Skyrmions3D.set_mpi!","text":"set_mpi!(skyrmion::Skyrmion, mpi)\n\nSet the pion mass of skyrmion to mpi.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_physical!","page":"API","title":"Skyrmions3D.set_physical!","text":"set_physical!(skyrmion::Skyrmion, is_physical; Fpi=Fpi, ee=ee)\n\nSets skyrmion to use physical units with Fpi MeV and skyrme coupling ee, when is_physical is true. Also used to turn off physical units by setting is_physical=false\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_Fpi!","page":"API","title":"Skyrmions3D.set_Fpi!","text":"set_Fpi!(skyrmion::Skyrmion, Fpi)\n\nSets the pion decay constant of skyrmion to Fpi. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_ee!","page":"API","title":"Skyrmions3D.set_ee!","text":"set_ee!(skyrmion::Skyrmion, ee)\n\nSets the Skyrme coupling constant of skyrmion to ee. \n\n\n\n\n\n","category":"function"},{"location":"api/#Create","page":"API","title":"Create","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"make_rational_map!\nmake_RM_product!\nmake_ADHM!\nproduct_approx!\nproduct_approx","category":"page"},{"location":"api/#Skyrmions3D.make_rational_map!","page":"API","title":"Skyrmions3D.make_rational_map!","text":"make_rational_map!(skyrmion, prof, pfn, qfn; kwargs... )\n\nWrites a rational map skyrmion in to skyrmion. The rational map is given by the polynomials R(z) = p(z)/q(z) and the profile f(r).\n\nIf no f is given, the function will find an OK approximation for the profile.\n\nOptional arguments\n\nX=[0.0,0.0,0.0]: translate the initial skyrmion by X\niTH = 0.0: isorotate by initial skyrmion by iTH\ni_n = 0.0: isorotate initial skyrmion around i_n\njTH = 0.0: isorotate by initial skyrmion by jTH\nj_n = 0.0: isorotate initial skyrmion around j_n\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.make_RM_product!","page":"API","title":"Skyrmions3D.make_RM_product!","text":"make_RM_product!(skyrmion, X_list)\n\nMakes a product approximation of many rational map skyrmions, determined through the  list X_list. The final field is written into skyrmion.\n\nThe formatting of the list is as follow: X_list = [ data_1, data_2, data_3, ... ] where data_1 = [ p(z), q(z), f(r), X, θiso, n_iso, θrot, n_rot ]\n\nSee also [product]\n\nExample of list\n\np1(z) = z; q1(z) = 1; f1(r) = 4*atan(exp(-r));\np2(z) = z^2; q2(z) = 1; f2(r) = 4*atan(exp(-0.7*r));\nX_list = [ [ p1, q1, f1, [0.0,0.0,1.5], 0.0, [0.0,0.0,1.0], 0.0, [0.0,0.0,1.0] ], [ p2, q2, f2, [0.0,0.0,-1.5], pi, [1.0,0.0,0.0], 0.0, [0.0,0.0,1.0] ] ]\n\nTechnical details\n\nThe product is taken pairwise in order. E.g. for a list of 3 skyrmions, we first calculate the symmetrised product of the first and second skyrmions then calculate the symmtrised product with the third skyrmion. Hence the final solution is not symmetric under permutations.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.make_ADHM!","page":"API","title":"Skyrmions3D.make_ADHM!","text":"make_ADHM!(skyrmion, L, M )\n\nWrites an ADHM skyrmion in to skyrmion. The ADHM data is given by L and M. L and M can be given by Bx4 and BxBx4 arrays or as B and BxB arrays of Quaternions, from the GLMakie package.\n\nExample of data\n\nB=2\n\nL = [ Quaternion(0.0,0.0,0.0,0.0) for a in 1:B ]\nM = [ Quaternion(0.0,0.0,0.0,0.0) for a in 1:B, b in 1:B ]\n\nL[1] = Quaternion(0.0, 0.0, 0.0, sqrt(2.0))\nL[2] = Quaternion(0.0, 0.0, sqrt(2.0), 0.0)\n\nM[1,1] = Quaternion(1.0, 0.0, 0.0, 0.0)\nM[1,2] = Quaternion(0.0, 1.0, 0.0, 0.0)\nM[2,1] = Quaternion(0.0, 1.0, 0.0, 0.0)\nM[2,2] = Quaternion(-1.0, 0.0, 0.0, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.product_approx!","page":"API","title":"Skyrmions3D.product_approx!","text":"product_approx!(skyrmion1,skyrmion2)\n\nMakes the symmetrised product approximation of skyrmion1 and skyrmion2. The output is written in to skyrmion1. The returned field is normalised.\n\nSee also [product_approx]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.product_approx","page":"API","title":"Skyrmions3D.product_approx","text":"product_approx(skyrmion1,skyrmion2) -> product_skyrmion\n\nReturns the symmetrised product approximation of skyrmion1 and skyrmion2. The returned field is normalised.\n\nSee also [product_approx!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Transform","page":"API","title":"Transform","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"translate_sk!\ntranslate_sk\nrotate_sk!\nrotate_sk\nisorotate_sk!\nisorotate_sk\ncenter_skyrmion!\nnormer\nnormer!","category":"page"},{"location":"api/#Skyrmions3D.translate_sk!","page":"API","title":"Skyrmions3D.translate_sk!","text":"translate_sk!(skyrmion,X)\n\nTranslates skyrmion by the 3-Vector X, e.g. X = [1.0, 0.0, 0.0]\n\nSee also [translate_sk]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.translate_sk","page":"API","title":"Skyrmions3D.translate_sk","text":"translate_sk(skyrmion,X) -> translated_skyrmion\n\nReturns skyrmion translated by 3-Vector X, e.g. X = [1.0, 0.0, 0.0]\n\nSee also [translate_sk!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.rotate_sk!","page":"API","title":"Skyrmions3D.rotate_sk!","text":"rotate_sk!(skyrmion,θ,n)\n\nRotates skyrmion by θ around the vector n. The given vector is automatically normalised.\n\nSee also [rotate_sk]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.rotate_sk","page":"API","title":"Skyrmions3D.rotate_sk","text":"rotate_sk(skyrmion,θ,n) -> rotated_skyrmion\n\nReturns skyrmion rotated by θ around the vector n. The given vector is automatically normalised.\n\nSee also [rotate_sk!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.isorotate_sk!","page":"API","title":"Skyrmions3D.isorotate_sk!","text":"isorotate_sk!(skyrmion,θ,n)\n\nIsorotates skyrmion by θ around the vector n. The given vector is automatically normalised.\n\nSee also [isorotate_sk!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.isorotate_sk","page":"API","title":"Skyrmions3D.isorotate_sk","text":"isorotate_sk(skyrmion,θ,n) -> isorotated_skyrmion\n\nReturns skyrmion isorotated by θ around the vector n. The given vector is automatically normalised.\n\nSee also [isorotate_sk!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.center_skyrmion!","page":"API","title":"Skyrmions3D.center_skyrmion!","text":"center_skyrmion(my_skyrmion)\n\nTranslates skyrmion' so that the center of mass is(0,0,0)'.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.normer","page":"API","title":"Skyrmions3D.normer","text":"normer(skyrmion)\n\nReturns normalised skyrmion.\n\nSee also [normer!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.normer!","page":"API","title":"Skyrmions3D.normer!","text":"normer!(skyrmion)\n\nNormalises skyrmion.\n\nSee also [normer]\n\n\n\n\n\n","category":"function"},{"location":"api/#Probe","page":"API","title":"Probe","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"overview\nEnergy\nBaryon\ncenter_of_mass\ncompute_current","category":"page"},{"location":"api/#Skyrmions3D.overview","page":"API","title":"Skyrmions3D.overview","text":"overview(skyrmion)\n\nDisplays an overview of skyrmion's properties.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.Energy","page":"API","title":"Skyrmions3D.Energy","text":"Energy(skyrmion; density=false)\n\nCompute energy of skyrmion.\n\nSet 'density = true' to output the energy density and moment to n to calculate the nth moment of the energy density.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.Baryon","page":"API","title":"Skyrmions3D.Baryon","text":"Baryon(skyrmion; density=false)\n\nCompute baryon number of skyrmion.\n\nSet 'density = true' to output the baryon density and moment to n to calculate the nth moment of the baryon density.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.center_of_mass","page":"API","title":"Skyrmions3D.center_of_mass","text":"center_of_mass(skyrmion; density=false, moment=0)\n\nCompute the center of mass of skyrmion, based on the energy density.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.compute_current","page":"API","title":"Skyrmions3D.compute_current","text":"compute_current(skyrmion; label=\"uMOI\", indices=[0,0], density = false, moment=0)\n\nCompute a variety of currents in the Skyrme model, based on a skyrmion. \n\nYou can calculate specific indices using e.g. indices = [1,2]. If indices = [0,0], the function will calculate all indices. If density = false, the function will return the integrated densities, while density = true it will return the densities. \n\nThe possible currents are (currently):\n\nuMOI: the isospin moment of inertia.\nwMOI: the mixed moment of inertia.\nvMOI: the spin moment of inertia.\nuAxial: the u-axial moment of inertia.\nwAxial: the w-axial moment of inertia.\nNoetherIso: the Noether vector current.\nNoetherAxial: the Noether axial current.\n\n\n\n\n\n","category":"function"},{"location":"api/#Flow","page":"API","title":"Flow","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"gradient_flow!\narrested_newton_flow!","category":"page"},{"location":"api/#Skyrmions3D.gradient_flow!","page":"API","title":"Skyrmions3D.gradient_flow!","text":"gradient_flow!(skyrmion; steps = n, tolerance = tol, dt=ls^2/80.0, checks = freq, print_stuff = true)\n\nApplies a gradient flow to skyrmion with timestep dt, either for n steps or until the error falls below tol. The error is checked every checks steps.\n\nSee also [newton_flow!, arrested_newton_flow!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.arrested_newton_flow!","page":"API","title":"Skyrmions3D.arrested_newton_flow!","text":"arrested_newton_flow!(skyrmion; skyrmion_dot, steps = n, tolerance = tol, dt=ls^2/80.0, frequency_of_checking_tolerance = freq, print_stuff = true)\n\nApplies an arrested Newton flow to skyrmion whose initial time derivative field is skyrmion_dot with timestep dt, either for n steps or until the error falls below tol. The error is checked every checks steps.\n\nSee also [gradient_flow!, newton_flow!]\n\n\n\n\n\n","category":"function"},{"location":"api/#Visualise","page":"API","title":"Visualise","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"plot_overview\nplot_baryon_density\ninteractive_flow","category":"page"},{"location":"api/#Skyrmions3D.plot_overview","page":"API","title":"Skyrmions3D.plot_overview","text":"plot_overview(skyrmion)\n\nPlots the pion fields and a baryon density of skyrmion.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.plot_baryon_density","page":"API","title":"Skyrmions3D.plot_baryon_density","text":"plot_baryon_density(skyrmion; iso_value = 0.5*(max(BD) - min(BD)), juggling = false, kwargs...)\n\nPlots an isosurface of constant baryon density, with value iso_value, coloured to reveal the pion field structure, originally described in [].\n\nCan use a juggling ball colouring scheme by setting juggling = true.\n\nOptional argument\n\nCan accept any arguments used in Axis3 from the Makie package. See more: [].\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.interactive_flow","page":"API","title":"Skyrmions3D.interactive_flow","text":"interactive_flow(my_skyrmion; iso_value=2.0, kwargs...)\n\nInitialises a interface, used for dynamics. Requires GLMakie to be active. Once activated, can interactively apply a gradient flow or arrested newton flow to the initial skyrme field `my_skyrmion'.\n\n\n\n\n\n","category":"function"},{"location":"#Skyrmions3D","page":"Skyrmions3D","title":"Skyrmions3D","text":"","category":"section"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"A Julia package for creating, manipulating and probing Skyrmions, in the Skyrme model of nuclear physics.","category":"page"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"","category":"page"},{"location":"#Learning-resources","page":"Skyrmions3D","title":"Learning resources","text":"","category":"section"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"Please take a look at the API on this page, located in the sidebar.","category":"page"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"There is  a [tutorial] available on github.","category":"page"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"I have also made one or two YouTube videos about the package.","category":"page"},{"location":"#Installation","page":"Skyrmions3D","title":"Installation","text":"","category":"section"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"TaylorSeries.jl is not yet a registered package, hence you must install it directly from github. You can do this directly in the REPL by first entering package mode (type ']') then writing 'add https://github.com/chrishalcrow/Skyrmions3D.jl.git'. Or you can write ']add https://github.com/chrishalcrow/Skyrmions3D.jl.git' into a cell in Jupyter notepad (this must be the only thing in the cell).","category":"page"},{"location":"#Authors","page":"Skyrmions3D","title":"Authors","text":"","category":"section"},{"location":"","page":"Skyrmions3D","title":"Skyrmions3D","text":"I am Chris Halcrow, a postdoc at KTH in Stockholm. I would love there to be more authors of this package. Please join in.","category":"page"}]
}
